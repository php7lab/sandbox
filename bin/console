#!/usr/bin/env php
<?php

use PhpLab\Sandbox\Package\Commands\InfoChangedCommand;
use PhpLab\Sandbox\Package\Commands\GitPullCommand;
use PhpLab\Sandbox\Package\Domain\Repositories\File\GroupRepository;
use PhpLab\Sandbox\Package\Domain\Repositories\File\InfoRepository;
use PhpLab\Sandbox\Package\Domain\Repositories\File\PackageRepository;
use PhpLab\Sandbox\Package\Domain\Services\GroupService;
use PhpLab\Sandbox\Package\Domain\Services\InfoService;
use PhpLab\Sandbox\Package\Domain\Services\PackageService;
use Symfony\Component\Console\Application;
use Symfony\Component\Dotenv\Dotenv;

use PhpLab\Sandbox\Dev\Commands\StressCommand;
use PhpLab\Sandbox\Dev\Domain\Services\StressService;

use PhpLab\Sandbox\Generator\Commands\DomainCommand;
use PhpLab\Sandbox\Generator\Domain\Services\DomainService;

require __DIR__ . '/../../../autoload.php';

if (!class_exists(Dotenv::class)) {
    throw new RuntimeException('Please run "composer require symfony/dotenv" to load the ".env" files configuring the application.');
} else {
    // load all the .env files
    (new Dotenv(false))->loadEnv(__DIR__ . '/../../../../.env');
}

// создаем консольное приложение
$application = new Application;

// создаем и объявляем команды
$stressService = new StressService;
$command = new StressCommand(StressCommand::getDefaultName(), $stressService);
$application->add($command);

// создаем и объявляем команды
$domainService = new DomainService;
$command = new DomainCommand(DomainCommand::getDefaultName(), $domainService);
$application->add($command);

$fileName = __DIR__ . '/../../../../vendor/php7lab/legacy/src/php7extension/core/package/domain/data/package_group.php';
$groupRepository = new GroupRepository($fileName);
$packageRepository = new PackageRepository($groupRepository);
$groupService = new GroupService($groupRepository, $packageRepository);

$infoRepository = new InfoRepository($groupService, $packageRepository);
$infoService = new InfoService($infoRepository);
$packageService = new PackageService($packageRepository);
$command = new InfoChangedCommand(null, $packageService);
$application->add($command);

$command = new GitPullCommand(null, $packageService);
$application->add($command);

$application->run();
